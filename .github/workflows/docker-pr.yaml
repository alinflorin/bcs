name: PR Build - Docker

on:
  push:
    branches:
      - main
    paths:
      - 'src/bcs-*/**'

  pull_request:
    branches:
      - main
    paths:
      - 'src/bcs-*/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.filter.outputs.changed_dirs }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Fetch PR base branch
        run: git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1

      - name: Get changed files
        id: changed
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - name: Detect changed BCS project dirs
        id: filter
        run: |
          dirs=$(echo "$CHANGED_FILES" \
            | grep '^src/bcs-' \
            | cut -d/ -f2 \
            | sort -u \
            | grep -v '^bcs-chart$' \
            | xargs)
          echo "changed_dirs=$(jq -nc --arg dirs "$dirs" '$dirs | split(" ")')" >> $GITHUB_OUTPUT



  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_dirs != '[]'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        project: ${{ fromJSON(needs.detect-changes.outputs.changed_dirs) }}
      max-parallel: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ matrix.project }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ matrix.project }}-

      - name: Build multi-arch Docker image with cache
        run: |
          echo "Building project: ${{ matrix.project }}"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ${{ matrix.project }}:${{ github.sha }} \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --build-arg VERSION=${{ github.sha }} \
            ./src/${{ matrix.project }} \
            --load

      - name: Scan image with Trivy and generate SARIF
        if: contains(needs.detect-changes.outputs.changed_dirs, matrix.project)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.project }}:${{ github.sha }}
          format: sarif
          output: trivy-${{ matrix.project }}.sarif
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1  # fail the job if vulnerabilities found

      - name: Upload SARIF to GitHub
        if: contains(needs.detect-changes.outputs.changed_dirs, matrix.project)
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-${{ matrix.project }}.sarif

      - name: Save updated Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
